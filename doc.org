#+TITLE: Arquitetura e Organização de Computadores I
#+SUBTITLE: Trabalho Prático 1
#+AUTHOR: Heitor Lourenço Werneck
#+EMAIL: heitorwerneck@hotmail.com
#+LANGUAGE: pt
#+OPTIONS: ^:nil email:nil author:nil toc:nil
#+LATEX_HEADER: \author{Heitor Lourenço Werneck \\{\href{mailto:heitorwerneck@hotmail.com}{heitorwerneck@hotmail.com}}}
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage[binary-units=true]{siunitx}
#+LATEX_HEADER: \usepackage[top=0.5cm,bottom=1.5cm,left=2cm,right=2cm]{geometry}
#+LATEX_HEADER: \usepackage{mdframed}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage[noend]{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{tikz}

#+latex_class_options: [12pt]
#+begin_export latex

\lstdefinelanguage{mips}{%
  % so listings can detect directives and register names
  alsoletter={.\$},
  % strings, characters, and comments
  morestring=[b]",
  morestring=[b]',
  morecomment=[l]\#,
  % instructions
  morekeywords={[1]abs,abs.d,abs.s,add,add.d,add.s,addi,addiu,addu,%
    and,andi,b,bc1f,bc1t,beq,beqz,bge,bgeu,bgez,bgezal,bgt,bgtu,%
    bgtz,ble,bleu,blez,blt,bltu,bltz,bltzal,bne,bnez,break,c.eq.d,%
    c.eq.s,c.le.d,c.le.s,c.lt.d,c.lt.s,ceil.w.d,ceil.w.s,clo,clz,%
    cvt.d.s,cvt.d.w,cvt.s.d,cvt.s.w,cvt.w.d,cvt.w.s,div,div.d,div.s,%
    divu,eret,floor.w.d,floor.w.s,j,jal,jalr,jr,l.d,l.s,la,lb,lbu,%
    ld,ldc1,lh,lhu,li,ll,lui,lw,lwc1,lwl,lwr,madd,maddu,mfc0,mfc1,%
    mfc1.d,mfhi,mflo,mov.d,mov.s,move,movf,movf.d,movf.s,movn,movn.d,%
    movn.s,movt,movt.d,movt.s,movz,movz.d,movz.s,msub,msubu,mtc0,mtc1,%
    mtc1.d,mthi,mtlo,mul,mul.d,mul.s,mulo,mulou,mult,multu,mulu,neg,%
    neg.d,neg.s,negu,nop,nor,not,or,ori,rem,remu,rol,ror,round.w.d,%
    round.w.s,s.d,s.s,sb,sc,sd,sdc1,seq,sge,sgeu,sgt,sgtu,sh,sle,%
    sleu,sll,sllv,slt,slti,sltiu,sltu,sne,sqrt.d,sqrt.s,sra,srav,srl,%
    srlv,sub,sub.d,sub.s,subi,subiu,subu,sw,swc1,swl,swr,syscall,teq,%
    teqi,tge,tgei,tgeiu,tgeu,tlt,tlti,tltiu,tltu,tne,tnei,trunc.w.d,%
    trunc.w.s,ulh,ulhu,ulw,ush,usw,xor,xori},
  % assembler directives
  morekeywords={[2].align,.ascii,.asciiz,.byte,.data,.double,.extern,%
    .float,.globl,.half,.kdata,.ktext,.set,.space,.text,.word},
  % register names
  morekeywords={[3]\$0,\$1,\$2,\$3,\$4,\$5,\$6,\$7,\$8,\$9,\$10,\$11,%
    \$12,\$13,\$14,\$15,\$16,\$17,\$18,\$19,\$20,\$21,\$22,\$23,\$24,%
    \$25,\$26,\$27,\$28,\$29,\$30,\$31,%
    \$zero,\$at,\$v0,\$v1,\$a0,\$a1,\$a2,\$a3,\$t0,\$t1,\$t2,\$t3,\$t4,
    \$t5,\$t6,\$t7,\$s0,\$s1,\$s2,\$s3,\$s4,\$s5,\$s6,\$s7,\$t8,\$t9,%
    \$k0,\$k1,\$gp,\$sp,\$fp,\$ra},
}[strings,comments,keywords]

#+end_export

#+begin_export latex

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{ %
literate=
{á}{{\'a}}1
{à}{{\`a}}1
{ã}{{\~a}}1
{é}{{\'e}}1
{ê}{{\^e}}1
{í}{{\'i}}1
{ó}{{\'o}}1
{õ}{{\~o}}1
{ú}{{\'u}}1
{ü}{{\"u}}1
{ç}{{\c{c}}}1,
  language=mips,       % the language of the code
  basicstyle=\footnotesize,       % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stepnumber=1,                   % the step between two line-numbers. If it's 1, each line 
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=4,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  title=\lstname,                 % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add a comment within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}
#+end_export
* Introdução
Esse trabalho consiste na solução do problema de calcular o valor do número \pi e o máximo divisor comum de dois números recursivamente em assembly MIPS.

* Número \pi
O número \pi pode ser calculado pela seguinte série:
$\pi = \frac{4}{1} - \frac{4}{3} + \frac{4}{5} - \frac{4}{7} + \frac{4}{9} - \frac{4}{11} + \frac{4}{13} - \frac{4}{15} \cdots$

O algoritmo a seguir exemplifica o cálculo do \pi com esta série.
#+BEGIN_EXPORT latex
\begin{algorithm}
\textbf{Input:} termos
\caption{Calcula $\pi$.}\label{alg:maxSubSquareGreedy}
\begin{algorithmic}[1]
\Procedure{pi}{}
\State $\pi=0$
\State $sinal=1$
\State $divisor=1$
\While{$termos\neq0$}
\State $\pi=\pi +sinal\cdot 4/divisor$
\State $sinal=sinal\cdot (-1)$
\State $divisor=divisor + 2$
\State $termos=termos-1$
\EndWhile
\EndProcedure
\end{algorithmic}
\end{algorithm}
#+END_EXPORT

Basta transformar esse algoritmo para assembly MIPS.

Para guardar o valor do número \pi foi utilizado um registrador do tipo /double/ para ter uma alta precisão. Logo foi utilizado por simplicidade todos registradores nos cálculos como /double/. Para inicializar cada registrador com seu valor foi criado os valores na seção /.data/.

#+begin_export latex
\begin{lstlisting}[language = mips]
        .data
dn1:    .double     -1.0
d0:     .double     0.0
d1:     .double     1.0
d2:     .double     2.0
d4:     .double     4.0
\end{lstlisting}
#+end_export

Na função principal a primeira coisa a ser feita é a chamada a função que lé a quantidade de termos, que é um inteiro, depois chama o algoritmo que calcula o pi e posteriormente imprime na tela o valor retornado.

#+begin_export latex
\begin{lstlisting}[language = mips]
main:
        addi        $v0,$zero,5         # $v0 = 5, função le inteiro
        syscall                         # a função receberá o número de termos a serem somados
        add         $a0,$v0,$zero       # número de termos
        jal         pi
        mov.d       $f12,$f0
        addi        $v0,$zero,3         # imprime double
        syscall                         # imprime o registrador $f12
\end{lstlisting}
#+end_export

A função /pi/ irá começar preservando os valores dos registradores a serem utilizados. Primeiro é guardado o valor do /stack pointer/ antes de ser alinhado e então depois de alinhado é feito o salvamento dos registradores.

#+begin_export latex
\begin{lstlisting}[language = mips]
pi:
        move        $t1,$sp             # guarda stack pointer antigo
        andi        $sp,$sp, 0xfffffff8 # alinha o sp
        addi        $sp,$sp,-40         # abre espaço no sp
        sdc1        $f2,0($sp)          # salva valores
        sdc1        $f4,8($sp)
        sdc1        $f6,16($sp)
        sdc1        $f8,24($sp)
        sdc1        $f12,32($sp)
\end{lstlisting}
#+end_export

O proximo passo é inicializar os registradores para o seu uso posterior.

#+begin_export latex
\begin{lstlisting}[language = mips]
        l.d         $f0,d0              # f0 = 0, variavel que guarda o resultado
        l.d         $f2,d1              # f2 = 1, divisor
        l.d         $f4,d1              # f4 = 1, sinal
        l.d         $f6,dn1             # f6 = -1, mudador de sinal
        l.d         $f8,d2              # f8 = 2, taxa de crescimento divisor
        l.d         $f12,d4             # f12 = 4, dividendo sempre 4
        move        $t0,$a0             # numero de termos
\end{lstlisting}
#+end_export

No /loop/ primeiro é checado se o número de termos é igual a zero, se não for então faz todo o processo de cálculo do termo a ser somado e soma-o no resultado final, depois muda o sinal, incrementa o divisor com 2, diminui o número de termos e então faz um salto incondicional para o /loop/.

#+begin_export latex
\begin{lstlisting}[language = mips]
loop:
        beq         $t0,$zero,end       # checa se acabou os termos
        div.d       $f10,$f12,$f2       # 4/divisor
        mul.d       $f10,$f10,$f4       # sinal*(4/divisor)
        add.d       $f0,$f0,$f10        # resultado = resultado + sinal*(4/divisor)
        mul.d       $f4,$f4,$f6         # muda o sinal, $f4*-1
        add.d       $f2,$f2,$f8         # divisor + 2
        addi        $t0,$t0,-1          # diminui numero de termos
        j           loop
\end{lstlisting}
#+end_export

No fim basta voltar com os valores originais dos registradores utilizados e retornar para o lugar que a função foi chamada.

#+begin_export latex
\begin{lstlisting}[language = mips]
        ldc1        $f2,0($sp)
        ldc1        $f4,8($sp)
        ldc1        $f6,16($sp)
        ldc1        $f8,24($sp)
        ldc1        $f12,32($sp)        # volta com os valores antigos
        move        $sp,$t1             # libera espaço sp, valor inicial
        jr          $ra                 # retorna
\end{lstlisting}
#+end_export

Execução do programa:
[[./pi.png]]
* Máximo divisor comum

Esse algoritmo necessita de uma função que recebe dois valores que são os que se quer achar o máximo divisor comum e retorna o máximo divisor comum deles.

O algoritmo do máximo divisor comum é o seguinte:

#+BEGIN_EXPORT latex
\begin{algorithm}
\textbf{Input:} a, b
\caption{Máximo divisor comum.}\label{alg:maxSubSquareGreedy}
\begin{algorithmic}[1]
\Procedure{mdc}{}
\If{$b==0$}
\State \Return $a$
\Else
\State \Return $mdc(b,a \% b)$
\EndIf
\EndProcedure
\end{algorithmic}
\end{algorithm}
#+END_EXPORT

Basta transformar o algoritmo no seu respectivo código assembly MIPS.

O primeiro passo do algoritmo é guardar os valores de entrada e retorno da função e depois de chamado o algoritmo que calcula o /mdc/ retornar com esses valores preservados.

#+begin_export latex
\begin{lstlisting}[language = mips]
fmdc:
        addi        $sp,$sp,-12 # guarda valores na pilha
        sw          $a0,0($sp)
        sw          $a1,4($sp)
        sw          $ra,8($sp)
        jal         mdc
        lw          $a0,0($sp) # desempilha
        lw          $a1,4($sp)
        lw          $ra,8($sp)
        addi        $sp,$sp,12
        jr          $ra
\end{lstlisting}
#+end_export




A primeira parte do algoritmo que irá realmente calcular o /mdc/ é intuitiva e não difere muito do que se espera. Se o segundo argumento for igual a 0 retorna o primeiro argumento, se não vai para a /label/ /else/.
#+begin_export latex
\begin{lstlisting}[language = mips]
mdc:                                    # mdc(a,b)
        bne         $a1,$zero,else      # if (b == 0)
        move        $v0,$a0             #
        jr          $ra                 # return a
\end{lstlisting}
#+end_export

Já no se não do algoritmo é preciso guardar o valor do registrador de endereço na memória para se chamar recursivamente a função e preservar o contexto. Após salvar é feito a chamada recursiva e depois volta com o valor da memória e retorna o valor retornado pela função.

#+begin_export latex
\begin{lstlisting}[language = mips]
else:
        addi        $sp,$sp,-4          # salva $ra
        sw          $ra,0($sp)
        move        $t0,$a1             # temp = b
        rem         $a1,$a0,$a1         # b = a % b
        move        $a0,$t0             # a = temp
        jal         mdc                 # mdc(b,a%b) chama a função recursivamente
        lw          $ra,0($sp)          # desempilha valor salvo
        addi        $sp,$sp,4
        jr          $ra
\end{lstlisting}
#+end_export

Na função principal o primeiro passo é obter os dois valores que se quer achar o máximo divisor comum. Depois disso é só chamar a função /mdc/ e imprimir o inteiro obtido.

#+begin_export latex
\begin{lstlisting}[language = mips]
main:
        addi        $v0,$zero,5         # $v0 = 5, função le inteiro
        syscall                         # a função receberá o número de termos a serem somados
        add         $a0,$v0,$zero
        addi        $v0,$zero,5         # $v0 = 5, função le inteiro
        syscall                         # a função receberá o número de termos a serem somados
        add         $a1,$v0,$zero
        jal         mdc
        move        $a0,$v0
        addi        $v0,$zero,1         # $v0 = 1, função imprime inteiro
        syscall
\end{lstlisting}
#+end_export

Execução do programa:
[[./mdc.png]]
